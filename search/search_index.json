{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nicescad API Documentation","text":""},{"location":"#nicescad.axes_helper","title":"<code>axes_helper</code>","text":""},{"location":"#nicescad.axes_helper.AxesHelper","title":"<code>AxesHelper</code>","text":"<p>A Python class for creating a 3D helper for visualizing the axes in a scene. This class is designed to be used with the <code>nicegui</code> library (https://pypi.org/project/nicegui/) for creating 3D scenes. It creates line objects for the x, y, and z axes, each with a distinct color, and provides methods for changing these colors and toggling their visibility.</p> <p>The original JavaScript code, which this Python code is based on, can be found at: https://raw.githubusercontent.com/mrdoob/three.js/master/src/helpers/AxesHelper.js The JavaScript code was refactored into this Python version by OpenAI's ChatGPT.</p> <p>For the refactoring, following prompts were given: 1. Refactor a JavaScript class for handling ThreeJS scenes into a Python class using the <code>nicegui</code> library. 2. The class should allow to hide/show axes. 3. Usage of <code>nicegui</code> library's API for the colors. 4. Include Google docstrings and type hints to the code. 5. The scene should be a constructor parameter to be remembered. 6. The Axes should be named x, y and z. The name attribute should be assigned after the line object creation. 7. The <code>set_colors</code> method should be called in the constructor. 8. Use <code>with self.scene as scene</code> when drawing the lines. 9. The class should provide a method to toggle the visibility of axes. 10. The default size of the axes to be drawn should be 10.0. 11. Color information should be persisted when toggling the axes. 12. Use a dictionary to store colors by axes names.</p> <p>According to nicegui's documentation (https://nicegui.io/documentation/scene), the 'scene.line()' function is used to create lines, here is an example:     scene.line([-4, 0, 0], [-4, 2, 0]).material('#ff0000') To remove elements from the scene, one uses 'scene.remove()' function:     scene.remove(element) where element is either the element instance or its ID.</p> <p>Date: 2023-07-24 @author: Refactored into Python by OpenAI's ChatGPT</p> <p>Attributes:</p> Name Type Description <code>size</code> <code>float</code> <p>The size of the axes to be drawn.</p> <code>scene</code> <code>scene</code> <p>The scene where the axes will be drawn.</p> Usage <p>scene = ui.scene().classes('w-full h-64') axes_helper = AxesHelper(scene, size=10.0) axes_helper.set_colors(x_axis_color='#FF0000', y_axis_color='#00FF00', z_axis_color='#0000FF')  # set colors for x, y, and z axes axes_helper.toggle_axes()  # toggle visibility of the axes</p> Source code in <code>nicescad/axes_helper.py</code> <pre><code>class AxesHelper:\n    \"\"\"\n    A Python class for creating a 3D helper for visualizing the axes in a scene.\n    This class is designed to be used with the `nicegui` library (https://pypi.org/project/nicegui/)\n    for creating 3D scenes. It creates line objects for the x, y, and z axes,\n    each with a distinct color, and provides methods for changing these colors and toggling their visibility.\n\n    The original JavaScript code, which this Python code is based on, can be found at:\n    https://raw.githubusercontent.com/mrdoob/three.js/master/src/helpers/AxesHelper.js\n    The JavaScript code was refactored into this Python version by OpenAI's ChatGPT.\n\n    For the refactoring, following prompts were given:\n    1. Refactor a JavaScript class for handling ThreeJS scenes into a Python class using the `nicegui` library.\n    2. The class should allow to hide/show axes.\n    3. Usage of `nicegui` library's API for the colors.\n    4. Include Google docstrings and type hints to the code.\n    5. The scene should be a constructor parameter to be remembered.\n    6. The Axes should be named x, y and z. The name attribute should be assigned after the line object creation.\n    7. The `set_colors` method should be called in the constructor.\n    8. Use `with self.scene as scene` when drawing the lines.\n    9. The class should provide a method to toggle the visibility of axes.\n    10. The default size of the axes to be drawn should be 10.0.\n    11. Color information should be persisted when toggling the axes.\n    12. Use a dictionary to store colors by axes names.\n\n    According to nicegui's documentation (https://nicegui.io/documentation/scene), the 'scene.line()' function is used to\n    create lines, here is an example:\n        scene.line([-4, 0, 0], [-4, 2, 0]).material('#ff0000')\n    To remove elements from the scene, one uses 'scene.remove()' function:\n        scene.remove(element)\n    where element is either the element instance or its ID.\n\n    Date: 2023-07-24\n    @author: Refactored into Python by OpenAI's ChatGPT\n\n    Attributes:\n        size (float): The size of the axes to be drawn.\n        scene (ui.scene): The scene where the axes will be drawn.\n\n    Usage:\n        scene = ui.scene().classes('w-full h-64')\n        axes_helper = AxesHelper(scene, size=10.0)\n        axes_helper.set_colors(x_axis_color='#FF0000', y_axis_color='#00FF00', z_axis_color='#0000FF')  # set colors for x, y, and z axes\n        axes_helper.toggle_axes()  # toggle visibility of the axes\n    \"\"\"\n\n    def __init__(self, scene: \"ui.scene\", size: float = 10.0):\n        \"\"\"\n        The constructor for AxesHelper class.\n\n        Args:\n            scene (ui.scene): The scene where the axes will be drawn.\n            size (float): The size of the axes to be drawn.\n        \"\"\"\n        self.scene = scene\n        self.size = size\n        self.vertices = [\n            (0, 0, 0),\n            (size, 0, 0),\n            (0, 0, 0),\n            (0, size, 0),\n            (0, 0, 0),\n            (0, 0, size),\n        ]\n\n        self.axis_names = [\"x\", \"y\", \"z\"]\n        self.lines = []\n        self.axes_visible = False\n        self.color_by_name = {\"x\": \"#FF0000\", \"y\": \"#00FF00\", \"z\": \"#0000FF\"}\n        self.toggle_axes()\n\n    def set_colors(\n        self,\n        x_axis_color: str = \"#FF0000\",\n        y_axis_color: str = \"#00FF00\",\n        z_axis_color: str = \"#0000FF\",\n    ):\n        \"\"\"\n        A method to set colors of the axes.\n\n        Args:\n            x_axis_color (str): Color of the x-axis.\n            y_axis_color (str): Color of the y-axis.\n            z_axis_color (str): Color of the z-axis.\n        \"\"\"\n        self.color_by_name = {\"x\": x_axis_color, \"y\": y_axis_color, \"z\": z_axis_color}\n        for idx, line in enumerate(self.lines):\n            line.material(self.color_by_name[self.axis_names[idx]])\n\n    def toggle_axes(self):\n        \"\"\"\n        A method to toggle the visibility of the axes.\n        \"\"\"\n        if self.axes_visible:\n            # Axes are currently visible, so remove them\n            for line in self.lines:\n                try:\n                    self.scene.remove(line)\n                except KeyError:\n                    pass\n            self.lines = []\n            self.axes_visible = False\n        else:\n            # Axes are currently not visible, so add them\n            with self.scene:\n                for i in range(3):\n                    line = self.scene.line(\n                        self.vertices[2 * i], self.vertices[2 * i + 1]\n                    )\n                    line.name = self.axis_names[i]\n                    line.material(self.color_by_name[line.name])\n                    self.lines.append(line)\n            self.axes_visible = True\n</code></pre>"},{"location":"#nicescad.axes_helper.AxesHelper.__init__","title":"<code>__init__(scene, size=10.0)</code>","text":"<p>The constructor for AxesHelper class.</p> <p>Parameters:</p> Name Type Description Default <code>scene</code> <code>scene</code> <p>The scene where the axes will be drawn.</p> required <code>size</code> <code>float</code> <p>The size of the axes to be drawn.</p> <code>10.0</code> Source code in <code>nicescad/axes_helper.py</code> <pre><code>def __init__(self, scene: \"ui.scene\", size: float = 10.0):\n    \"\"\"\n    The constructor for AxesHelper class.\n\n    Args:\n        scene (ui.scene): The scene where the axes will be drawn.\n        size (float): The size of the axes to be drawn.\n    \"\"\"\n    self.scene = scene\n    self.size = size\n    self.vertices = [\n        (0, 0, 0),\n        (size, 0, 0),\n        (0, 0, 0),\n        (0, size, 0),\n        (0, 0, 0),\n        (0, 0, size),\n    ]\n\n    self.axis_names = [\"x\", \"y\", \"z\"]\n    self.lines = []\n    self.axes_visible = False\n    self.color_by_name = {\"x\": \"#FF0000\", \"y\": \"#00FF00\", \"z\": \"#0000FF\"}\n    self.toggle_axes()\n</code></pre>"},{"location":"#nicescad.axes_helper.AxesHelper.set_colors","title":"<code>set_colors(x_axis_color='#FF0000', y_axis_color='#00FF00', z_axis_color='#0000FF')</code>","text":"<p>A method to set colors of the axes.</p> <p>Parameters:</p> Name Type Description Default <code>x_axis_color</code> <code>str</code> <p>Color of the x-axis.</p> <code>'#FF0000'</code> <code>y_axis_color</code> <code>str</code> <p>Color of the y-axis.</p> <code>'#00FF00'</code> <code>z_axis_color</code> <code>str</code> <p>Color of the z-axis.</p> <code>'#0000FF'</code> Source code in <code>nicescad/axes_helper.py</code> <pre><code>def set_colors(\n    self,\n    x_axis_color: str = \"#FF0000\",\n    y_axis_color: str = \"#00FF00\",\n    z_axis_color: str = \"#0000FF\",\n):\n    \"\"\"\n    A method to set colors of the axes.\n\n    Args:\n        x_axis_color (str): Color of the x-axis.\n        y_axis_color (str): Color of the y-axis.\n        z_axis_color (str): Color of the z-axis.\n    \"\"\"\n    self.color_by_name = {\"x\": x_axis_color, \"y\": y_axis_color, \"z\": z_axis_color}\n    for idx, line in enumerate(self.lines):\n        line.material(self.color_by_name[self.axis_names[idx]])\n</code></pre>"},{"location":"#nicescad.axes_helper.AxesHelper.toggle_axes","title":"<code>toggle_axes()</code>","text":"<p>A method to toggle the visibility of the axes.</p> Source code in <code>nicescad/axes_helper.py</code> <pre><code>def toggle_axes(self):\n    \"\"\"\n    A method to toggle the visibility of the axes.\n    \"\"\"\n    if self.axes_visible:\n        # Axes are currently visible, so remove them\n        for line in self.lines:\n            try:\n                self.scene.remove(line)\n            except KeyError:\n                pass\n        self.lines = []\n        self.axes_visible = False\n    else:\n        # Axes are currently not visible, so add them\n        with self.scene:\n            for i in range(3):\n                line = self.scene.line(\n                    self.vertices[2 * i], self.vertices[2 * i + 1]\n                )\n                line.name = self.axis_names[i]\n                line.material(self.color_by_name[line.name])\n                self.lines.append(line)\n        self.axes_visible = True\n</code></pre>"},{"location":"#nicescad.blockscad_converter","title":"<code>blockscad_converter</code>","text":"<p>A class to convert BlockSCAD XML files to SCAD files using the OpenAI language model API.</p> <p>BlockSCAD Editor: https://www.blockscad3d.com/editor/ OpenSCAD: https://openscad.org/ NiceSCAD: http://nicescad.bitplan.com/ Relevant Issue: http://nicescad.bitplan.com/issue/23</p> <p>Author: OpenAI ChatGPT Date: July 25, 2023</p> <p>The code was created by the OpenAI ChatGPT model in response to the following prompts: - \"Create a class named 'BlockscadConverter' that converts BlockSCAD XML files to SCAD files.\" - \"The xml_path is given in the constructor.\" - \"The class should have a method named <code>convert_to_scad</code> that outputs a path to the SCAD file.\" - \"Use the write method of a file object to output the SCAD file.\" - \"Include Google docstrings and type hints to the code.\" - \"Include comments that explain which prompts created the code. This helps other LLMs understand how to reproduce the same results.\" - \"Add links to the BlockSCAD editor (https://www.blockscad3d.com/editor/), OpenSCAD (https://openscad.org/), and the target platform (NiceSCAD, http://nicescad.bitplan.com/).\" - \"Include the link to the relevant issue: 'support reading and converting blockscad files #23' on http://nicescad.bitplan.com/issue/23\" - \"Add yourself (OpenAI ChatGPT) as the author and include the date\" - \"keep the prompt list in the comments to be able to reproduce the results.\" - \"If the OpenAI API key is not available in the environment variables, look for it in a JSON file at <code>~/.openai/openai_api_key.json</code>.\" - \"If the OpenAI API key is not found, throw an exception.\"</p>"},{"location":"#nicescad.blockscad_converter.BlockscadConverter","title":"<code>BlockscadConverter</code>","text":""},{"location":"#nicescad.blockscad_converter.BlockscadConverter--attributes","title":"Attributes","text":"<p>xml_path : str     path to the input BlockSCAD XML file</p>"},{"location":"#nicescad.blockscad_converter.BlockscadConverter--methods","title":"Methods","text":"<p>convert_to_scad(scad_path: str) -&gt; Union[str, None]     Converts the BlockSCAD XML file to a SCAD file and returns the SCAD file path.</p> Source code in <code>nicescad/blockscad_converter.py</code> <pre><code>class BlockscadConverter:\n    \"\"\"\n    Attributes\n    ----------\n    xml_path : str\n        path to the input BlockSCAD XML file\n\n    Methods\n    -------\n    convert_to_scad(scad_path: str) -&gt; Union[str, None]\n        Converts the BlockSCAD XML file to a SCAD file and returns the SCAD file path.\n    \"\"\"\n\n    def __init__(self, xml_path: str):\n        \"\"\"\n        Parameters\n        ----------\n        xml_path : str\n            path to the input BlockSCAD XML file\n        \"\"\"\n        self.xml_path = xml_path\n\n    def convert_to_scad(self, scad_path: str) -&gt; Union[str, None]:\n        \"\"\"\n        Converts the BlockSCAD XML file to a SCAD file using the OpenAI language model API.\n\n        Parameters\n        ----------\n        scad_path : str\n            path to the output SCAD file\n\n        Returns\n        -------\n        Union[str, None]\n            path to the output SCAD file if conversion is successful, None otherwise\n        \"\"\"\n        # Load the API key from the environment or a JSON file\n        openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n        json_file = Path.home() / \".openai\" / \"openai_api_key.json\"\n\n        if openai_api_key is None and json_file.is_file():\n            with open(json_file, \"r\") as file:\n                data = json.load(file)\n                openai_api_key = data.get(\"OPENAI_API_KEY\")\n\n        if openai_api_key is None:\n            raise ValueError(\n                \"No OpenAI API key found. Please set the 'OPENAI_API_KEY' environment variable or store it in `~/.openai/openai_api_key.json`.\"\n            )\n\n        openai.api_key = openai_api_key\n\n        # Read the XML file\n        with open(self.xml_path, \"r\") as file:\n            xml_content = file.read()\n\n        # Check if the XML content is a BlockSCAD XML\n        if '&lt;xml xmlns=\"https://blockscad3d.com' not in xml_content:\n            msg = f\"The file at {self.xml_path} is not a valid BlockSCAD XML file.\"\n            raise Exception(msg)\n\n        # Use the API to convert the XML to SCAD\n        response = openai.Completion.create(\n            engine=\"text-davinci-002\",\n            prompt=f\"\"\"Convert the following BlockSCAD XML to OpenSCAD and make sure to add a preamble comment (verbatim):\n// OpenSCAD \n// converted from BlockSCAD XML by nicescad's blockscad converter\n// according to \n// https://github.com/WolfgangFahl/nicescad/issues/23\n// support reading and converting blockscad files #23\n//\nmake sure to convert as direct as possible e.g. \ntranslate,rotate,cylinder,sphere,cube,color which are available in OpenScad should be           \nused as such. \nUse all parameters e.g. prefer cube(10,10,10,center=true) to cube(10) when the parameters are available in\nthe original xml file.\n&lt;field name=\"CENTERDROPDOWN\"&gt;false&lt;/field&gt; e.g. leads to center=false\nAdd the original color command using a color name when applicable e.g. color(\"green\");.\nTry high reproduceability by not making any assumptions and keeping the structure intact. So do not add an initial translate. \n\nDo not add extra empty comments.\nAvoid any empty lines - really - never add whitespace that harms getting always the same result.\nAlways use // line comments never /* \nAlways indent with two spaces.\nMake sure commands end with a semicolon.\n\nHere is the BlockSCAD XML:\\n{xml_content}\n\"\"\",\n            temperature=0.5,\n            max_tokens=1000,\n        )\n\n        scad_content = response.choices[0].text.strip()\n\n        # A very basic check to see if the SCAD content seems okay\n        if not scad_content.startswith(\"// OpenSCAD\"):\n            msg = f\"The conversion of {self.xml_path} failed - the // OpenSCAD comment is missing in:\\n {scad_content}.\"\n            raise Exception(msg)\n\n        # Write the SCAD code to the output file\n        with open(scad_path, \"w\") as scad_file:\n            scad_file.write(scad_content)\n\n        return scad_path\n</code></pre>"},{"location":"#nicescad.blockscad_converter.BlockscadConverter.__init__","title":"<code>__init__(xml_path)</code>","text":""},{"location":"#nicescad.blockscad_converter.BlockscadConverter.__init__--parameters","title":"Parameters","text":"<p>xml_path : str     path to the input BlockSCAD XML file</p> Source code in <code>nicescad/blockscad_converter.py</code> <pre><code>def __init__(self, xml_path: str):\n    \"\"\"\n    Parameters\n    ----------\n    xml_path : str\n        path to the input BlockSCAD XML file\n    \"\"\"\n    self.xml_path = xml_path\n</code></pre>"},{"location":"#nicescad.blockscad_converter.BlockscadConverter.convert_to_scad","title":"<code>convert_to_scad(scad_path)</code>","text":"<p>Converts the BlockSCAD XML file to a SCAD file using the OpenAI language model API.</p>"},{"location":"#nicescad.blockscad_converter.BlockscadConverter.convert_to_scad--parameters","title":"Parameters","text":"<p>scad_path : str     path to the output SCAD file</p>"},{"location":"#nicescad.blockscad_converter.BlockscadConverter.convert_to_scad--returns","title":"Returns","text":"<p>Union[str, None]     path to the output SCAD file if conversion is successful, None otherwise</p> Source code in <code>nicescad/blockscad_converter.py</code> <pre><code>    def convert_to_scad(self, scad_path: str) -&gt; Union[str, None]:\n        \"\"\"\n        Converts the BlockSCAD XML file to a SCAD file using the OpenAI language model API.\n\n        Parameters\n        ----------\n        scad_path : str\n            path to the output SCAD file\n\n        Returns\n        -------\n        Union[str, None]\n            path to the output SCAD file if conversion is successful, None otherwise\n        \"\"\"\n        # Load the API key from the environment or a JSON file\n        openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n        json_file = Path.home() / \".openai\" / \"openai_api_key.json\"\n\n        if openai_api_key is None and json_file.is_file():\n            with open(json_file, \"r\") as file:\n                data = json.load(file)\n                openai_api_key = data.get(\"OPENAI_API_KEY\")\n\n        if openai_api_key is None:\n            raise ValueError(\n                \"No OpenAI API key found. Please set the 'OPENAI_API_KEY' environment variable or store it in `~/.openai/openai_api_key.json`.\"\n            )\n\n        openai.api_key = openai_api_key\n\n        # Read the XML file\n        with open(self.xml_path, \"r\") as file:\n            xml_content = file.read()\n\n        # Check if the XML content is a BlockSCAD XML\n        if '&lt;xml xmlns=\"https://blockscad3d.com' not in xml_content:\n            msg = f\"The file at {self.xml_path} is not a valid BlockSCAD XML file.\"\n            raise Exception(msg)\n\n        # Use the API to convert the XML to SCAD\n        response = openai.Completion.create(\n            engine=\"text-davinci-002\",\n            prompt=f\"\"\"Convert the following BlockSCAD XML to OpenSCAD and make sure to add a preamble comment (verbatim):\n// OpenSCAD \n// converted from BlockSCAD XML by nicescad's blockscad converter\n// according to \n// https://github.com/WolfgangFahl/nicescad/issues/23\n// support reading and converting blockscad files #23\n//\nmake sure to convert as direct as possible e.g. \ntranslate,rotate,cylinder,sphere,cube,color which are available in OpenScad should be           \nused as such. \nUse all parameters e.g. prefer cube(10,10,10,center=true) to cube(10) when the parameters are available in\nthe original xml file.\n&lt;field name=\"CENTERDROPDOWN\"&gt;false&lt;/field&gt; e.g. leads to center=false\nAdd the original color command using a color name when applicable e.g. color(\"green\");.\nTry high reproduceability by not making any assumptions and keeping the structure intact. So do not add an initial translate. \n\nDo not add extra empty comments.\nAvoid any empty lines - really - never add whitespace that harms getting always the same result.\nAlways use // line comments never /* \nAlways indent with two spaces.\nMake sure commands end with a semicolon.\n\nHere is the BlockSCAD XML:\\n{xml_content}\n\"\"\",\n            temperature=0.5,\n            max_tokens=1000,\n        )\n\n        scad_content = response.choices[0].text.strip()\n\n        # A very basic check to see if the SCAD content seems okay\n        if not scad_content.startswith(\"// OpenSCAD\"):\n            msg = f\"The conversion of {self.xml_path} failed - the // OpenSCAD comment is missing in:\\n {scad_content}.\"\n            raise Exception(msg)\n\n        # Write the SCAD code to the output file\n        with open(scad_path, \"w\") as scad_file:\n            scad_file.write(scad_content)\n\n        return scad_path\n</code></pre>"},{"location":"#nicescad.nicescad_cmd","title":"<code>nicescad_cmd</code>","text":"<p>Created on 2023-07-19</p> <p>@author: wf</p>"},{"location":"#nicescad.nicescad_cmd.NiceScadCmd","title":"<code>NiceScadCmd</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>command line handling for nicescad</p> Source code in <code>nicescad/nicescad_cmd.py</code> <pre><code>class NiceScadCmd(WebserverCmd):\n    \"\"\"\n    command line handling for nicescad\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        constructor\n        \"\"\"\n        config = NiceScadWebServer.get_config()\n        WebserverCmd.__init__(self, config, NiceScadWebServer, DEBUG)\n        pass\n\n    def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n        \"\"\"\n        override the default argparser call\n        \"\"\"\n        parser = super().getArgParser(description, version_msg)\n        parser.add_argument(\n            \"-v\",\n            \"--verbose\",\n            action=\"store_true\",\n            help=\"show verbose output [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"-rp\",\n            \"--root_path\",\n            default=NiceScadWebServer.examples_path(),\n            help=\"path to pdf files [default: %(default)s]\",\n        )\n        return parser\n</code></pre>"},{"location":"#nicescad.nicescad_cmd.NiceScadCmd.__init__","title":"<code>__init__()</code>","text":"<p>constructor</p> Source code in <code>nicescad/nicescad_cmd.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    constructor\n    \"\"\"\n    config = NiceScadWebServer.get_config()\n    WebserverCmd.__init__(self, config, NiceScadWebServer, DEBUG)\n    pass\n</code></pre>"},{"location":"#nicescad.nicescad_cmd.NiceScadCmd.getArgParser","title":"<code>getArgParser(description, version_msg)</code>","text":"<p>override the default argparser call</p> Source code in <code>nicescad/nicescad_cmd.py</code> <pre><code>def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n    \"\"\"\n    override the default argparser call\n    \"\"\"\n    parser = super().getArgParser(description, version_msg)\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"show verbose output [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"-rp\",\n        \"--root_path\",\n        default=NiceScadWebServer.examples_path(),\n        help=\"path to pdf files [default: %(default)s]\",\n    )\n    return parser\n</code></pre>"},{"location":"#nicescad.nicescad_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>main call</p> Source code in <code>nicescad/nicescad_cmd.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    main call\n    \"\"\"\n    cmd = NiceScadCmd()\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#nicescad.openscad","title":"<code>openscad</code>","text":"<p>Created on 2023-07-19</p> <p>@author: wf</p> <p>This module contains the class OpenScad, a wrapper for OpenScad.</p>"},{"location":"#nicescad.openscad.OpenSCADLexer","title":"<code>OpenSCADLexer</code>","text":"<p>               Bases: <code>RegexLexer</code></p> <p>Lexer for OpenSCAD, a language for creating solid 3D CAD models.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the lexer.</p> <code>aliases</code> <code>list of str</code> <p>A list of strings that can be used as aliases for the lexer.</p> <code>filenames</code> <code>list of str</code> <p>A list of strings that define filename patterns that match this lexer.</p> Source code in <code>nicescad/openscad.py</code> <pre><code>class OpenSCADLexer(RegexLexer):\n    \"\"\"\n    Lexer for OpenSCAD, a language for creating solid 3D CAD models.\n\n    Attributes:\n        name (str): The name of the lexer.\n        aliases (list of str): A list of strings that can be used as aliases for the lexer.\n        filenames (list of str): A list of strings that define filename patterns that match this lexer.\n    \"\"\"\n\n    name = \"OpenSCAD\"\n    aliases = [\"openscad\"]\n    filenames = [\"*.scad\"]\n\n    tokens = {\n        \"root\": [\n            (r\"\\s+\", Text.Whitespace),\n            (r\"//.*?$\", Comment.Single),\n            (r\"/\\*.*?\\*/\", Comment.Multiline),\n            (r\"[a-z_][\\w]*\", Name.Variable),\n            (r\"\\d+\", Number.Integer),\n            (r\"\\+\\+|--\", Operator),\n            (r\"[=+\\-*/%&amp;|^&lt;&gt;!]=?\", Operator),\n            (r\"[\\[\\]{}();,.]\", Punctuation),\n            (r'\"(\\\\\\\\|\\\\\"|[^\"])*\"', String),\n            (r\"\\b(module|if|else|for|let|echo)\\b\", Keyword),\n            (r\"\\b(true|false|undef)\\b\", Keyword.Constant),\n            (\n                r\"\\b(cube|sphere|cylinder|polyhedron|square|circle|polygon|import|scale|resize|color|offset|minkowski|hull|render|surface|rotate|translate|mirror|multmatrix|projection|rotate_extrude|linear_extrude)\\b\",\n                Name.Builtin,\n            ),\n        ],\n    }\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad","title":"<code>OpenScad</code>","text":"<p>A wrapper for OpenScad (https://openscad.org/).</p> Source code in <code>nicescad/openscad.py</code> <pre><code>class OpenScad:\n    \"\"\"\n    A wrapper for OpenScad (https://openscad.org/).\n    \"\"\"\n\n    def __init__(self, scad_prepend: str = \"\", **kw) -&gt; None:\n        \"\"\"\n        Initializes the OpenScad object.\n        \"\"\"\n        self.scad_prepend = scad_prepend\n        self.openscad_exec = None\n        self.openscad_tmp_dir = None\n        if \"OPENSCAD_EXEC\" in os.environ:\n            self.openscad_exec = os.environ[\"OPENSCAD_EXEC\"]\n        if \"OPENSCAD_TMP_DIR\" in os.environ:\n            self.openscad_tmp_dir = os.environ[\"OPENSCAD_TMP_DIR\"]\n        if self.openscad_tmp_dir is not None:\n            self.tmp_dir = self.openscad_tmp_dir\n        else:\n            self.tmp_dir = tempfile.mkdtemp()\n        if \"openscad_exec\" in kw:\n            self.openscad_exec = kw[\"openscad_exec\"]\n        if self.openscad_exec is None:\n            self._try_detect_openscad_exec()\n        if self.openscad_exec is None:\n            raise Exception(\"openscad exec not found!\")\n\n    def highlight_code(self, code: str) -&gt; str:\n        \"\"\"\n        Highlights the provided OpenSCAD code and returns the highlighted code in HTML format.\n\n        Args:\n            code (str): The OpenSCAD code to highlight.\n\n        Returns:\n            str: The input OpenSCAD code, highlighted and formatted as an HTML string.\n        \"\"\"\n        html = highlight(code, OpenSCADLexer(), HtmlFormatter())\n        return html\n\n    def _try_executable(self, executable_path: str) -&gt; None:\n        \"\"\"\n        Checks if the specified path is a file. If it is, sets it as the OpenScad executable.\n\n        Args:\n            executable_path (str): The path to the executable file.\n        \"\"\"\n        if os.path.isfile(executable_path):\n            self.openscad_exec = executable_path\n\n    def _try_detect_openscad_exec(self) -&gt; None:\n        \"\"\"\n        Tries to find the OpenScad executable on the system.\n\n        References:\n            https://github.com/nickc92/ViewSCAD/blob/d4597ff6870316dfaafa4f9ecc8ef62773081c61/viewscad/renderer.py#L206C5-L222C1\n        \"\"\"\n        platfm = platform.system()\n        if platfm == \"Linux\":\n            self._try_executable(\"/usr/bin/openscad\")\n            if self.openscad_exec is None:\n                self._try_executable(\"/usr/local/bin/openscad\")\n        elif platfm == \"Darwin\":\n            self._try_executable(\"/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD\")\n        elif platfm == \"Windows\":\n            self._try_executable(\n                os.path.join(\n                    os.environ.get(\"Programfiles(x86)\", \"C:\"), \"OpenSCAD\\\\openscad.exe\"\n                )\n            )\n            self._try_executable(\n                os.path.join(\n                    os.environ.get(\"Programfiles\", \"C:\"), \"OpenSCAD\\\\openscad.exe\"\n                )\n            )\n\n    def write_to_tmp_file(self, openscad_str: str, do_prepend: bool = True):\n        \"\"\"\n        Writes an OpenSCAD string to a temporary file.\n\n        The `scad_prepend` string is prepended to the OpenSCAD code before writing,\n        unless the OpenSCAD code contains the string '//!OpenSCAD', or `do_prepend`\n        is set to `False`. In these cases, only the OpenSCAD code is written to the file.\n\n        Args:\n            openscad_str (str): The OpenSCAD code.\n            do_prepend (bool, optional): If `True`, the `scad_prepend` string is\n                                          prepended to the OpenSCAD code. Defaults to `True`.\n\n        Returns:\n            str: The path to the temporary file where the OpenSCAD code (and\n                 possibly the `scad_prepend` string) was written.\n        \"\"\"\n        scad_tmp_file = os.path.join(self.tmp_dir, \"tmp.scad\")\n        with open(scad_tmp_file, \"w\") as of:\n            if do_prepend and \"//!OpenSCAD\" not in openscad_str:\n                of.write(self.scad_prepend)\n            of.write(openscad_str)\n        return scad_tmp_file\n\n    async def render_to_file_async(\n        self, openscad_str: str, stl_path: str\n    ) -&gt; Awaitable[Subprocess]:\n        \"\"\"\n        Asynchronously renders an OpenSCAD string to a file.\n\n        Args:\n            openscad_str (str): The OpenSCAD code.\n            stl_path(str): The path to the output file.\n\n        Returns:\n            Subprocess: the openscad execution result\n        \"\"\"\n        scad_tmp_file = self.write_to_tmp_file(openscad_str)\n\n        # now run openscad to generate stl:\n        cmd = [self.openscad_exec, \"-o\", stl_path, scad_tmp_file]\n        self.saved_umask = os.umask(0o077)\n        result = await Subprocess.run_async(cmd)\n        os.umask(self.saved_umask)\n\n        self.cleanup_tmp_file(result, scad_tmp_file)\n        result.stl_path = stl_path\n        return result\n\n    def cleanup_tmp_file(self, result, scad_tmp_file):\n        \"\"\"\n        Cleanup temporary files after subprocess execution.\n\n        Args:\n            result (Subprocess): The result of the subprocess execution.\n            scad_tmp_file (str): The path to the temporary file.\n        \"\"\"\n        if result.returncode == 0:\n            if os.path.isfile(scad_tmp_file):\n                os.remove(scad_tmp_file)\n        else:\n            result.scad_tmp_file = scad_tmp_file\n\n    async def openscad_str_to_file(\n        self, openscad_str: str, stl_path: str\n    ) -&gt; Subprocess:\n        \"\"\"\n        Renders the OpenSCAD code to a file.\n\n        Args:\n            openscad_str (str): The OpenSCAD code.\n            stl_path(str): the path to the stl file\n\n        Returns:\n            Subprocess: The result of the subprocess run, encapsulated in a Subprocess object.\n        \"\"\"\n        result = await self.render_to_file_async(openscad_str, stl_path)\n        return result\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad.__init__","title":"<code>__init__(scad_prepend='', **kw)</code>","text":"<p>Initializes the OpenScad object.</p> Source code in <code>nicescad/openscad.py</code> <pre><code>def __init__(self, scad_prepend: str = \"\", **kw) -&gt; None:\n    \"\"\"\n    Initializes the OpenScad object.\n    \"\"\"\n    self.scad_prepend = scad_prepend\n    self.openscad_exec = None\n    self.openscad_tmp_dir = None\n    if \"OPENSCAD_EXEC\" in os.environ:\n        self.openscad_exec = os.environ[\"OPENSCAD_EXEC\"]\n    if \"OPENSCAD_TMP_DIR\" in os.environ:\n        self.openscad_tmp_dir = os.environ[\"OPENSCAD_TMP_DIR\"]\n    if self.openscad_tmp_dir is not None:\n        self.tmp_dir = self.openscad_tmp_dir\n    else:\n        self.tmp_dir = tempfile.mkdtemp()\n    if \"openscad_exec\" in kw:\n        self.openscad_exec = kw[\"openscad_exec\"]\n    if self.openscad_exec is None:\n        self._try_detect_openscad_exec()\n    if self.openscad_exec is None:\n        raise Exception(\"openscad exec not found!\")\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad.cleanup_tmp_file","title":"<code>cleanup_tmp_file(result, scad_tmp_file)</code>","text":"<p>Cleanup temporary files after subprocess execution.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>Subprocess</code> <p>The result of the subprocess execution.</p> required <code>scad_tmp_file</code> <code>str</code> <p>The path to the temporary file.</p> required Source code in <code>nicescad/openscad.py</code> <pre><code>def cleanup_tmp_file(self, result, scad_tmp_file):\n    \"\"\"\n    Cleanup temporary files after subprocess execution.\n\n    Args:\n        result (Subprocess): The result of the subprocess execution.\n        scad_tmp_file (str): The path to the temporary file.\n    \"\"\"\n    if result.returncode == 0:\n        if os.path.isfile(scad_tmp_file):\n            os.remove(scad_tmp_file)\n    else:\n        result.scad_tmp_file = scad_tmp_file\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad.highlight_code","title":"<code>highlight_code(code)</code>","text":"<p>Highlights the provided OpenSCAD code and returns the highlighted code in HTML format.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The OpenSCAD code to highlight.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The input OpenSCAD code, highlighted and formatted as an HTML string.</p> Source code in <code>nicescad/openscad.py</code> <pre><code>def highlight_code(self, code: str) -&gt; str:\n    \"\"\"\n    Highlights the provided OpenSCAD code and returns the highlighted code in HTML format.\n\n    Args:\n        code (str): The OpenSCAD code to highlight.\n\n    Returns:\n        str: The input OpenSCAD code, highlighted and formatted as an HTML string.\n    \"\"\"\n    html = highlight(code, OpenSCADLexer(), HtmlFormatter())\n    return html\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad.openscad_str_to_file","title":"<code>openscad_str_to_file(openscad_str, stl_path)</code>  <code>async</code>","text":"<p>Renders the OpenSCAD code to a file.</p> <p>Parameters:</p> Name Type Description Default <code>openscad_str</code> <code>str</code> <p>The OpenSCAD code.</p> required <code>stl_path(str)</code> <p>the path to the stl file</p> required <p>Returns:</p> Name Type Description <code>Subprocess</code> <code>Subprocess</code> <p>The result of the subprocess run, encapsulated in a Subprocess object.</p> Source code in <code>nicescad/openscad.py</code> <pre><code>async def openscad_str_to_file(\n    self, openscad_str: str, stl_path: str\n) -&gt; Subprocess:\n    \"\"\"\n    Renders the OpenSCAD code to a file.\n\n    Args:\n        openscad_str (str): The OpenSCAD code.\n        stl_path(str): the path to the stl file\n\n    Returns:\n        Subprocess: The result of the subprocess run, encapsulated in a Subprocess object.\n    \"\"\"\n    result = await self.render_to_file_async(openscad_str, stl_path)\n    return result\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad.render_to_file_async","title":"<code>render_to_file_async(openscad_str, stl_path)</code>  <code>async</code>","text":"<p>Asynchronously renders an OpenSCAD string to a file.</p> <p>Parameters:</p> Name Type Description Default <code>openscad_str</code> <code>str</code> <p>The OpenSCAD code.</p> required <code>stl_path(str)</code> <p>The path to the output file.</p> required <p>Returns:</p> Name Type Description <code>Subprocess</code> <code>Awaitable[Subprocess]</code> <p>the openscad execution result</p> Source code in <code>nicescad/openscad.py</code> <pre><code>async def render_to_file_async(\n    self, openscad_str: str, stl_path: str\n) -&gt; Awaitable[Subprocess]:\n    \"\"\"\n    Asynchronously renders an OpenSCAD string to a file.\n\n    Args:\n        openscad_str (str): The OpenSCAD code.\n        stl_path(str): The path to the output file.\n\n    Returns:\n        Subprocess: the openscad execution result\n    \"\"\"\n    scad_tmp_file = self.write_to_tmp_file(openscad_str)\n\n    # now run openscad to generate stl:\n    cmd = [self.openscad_exec, \"-o\", stl_path, scad_tmp_file]\n    self.saved_umask = os.umask(0o077)\n    result = await Subprocess.run_async(cmd)\n    os.umask(self.saved_umask)\n\n    self.cleanup_tmp_file(result, scad_tmp_file)\n    result.stl_path = stl_path\n    return result\n</code></pre>"},{"location":"#nicescad.openscad.OpenScad.write_to_tmp_file","title":"<code>write_to_tmp_file(openscad_str, do_prepend=True)</code>","text":"<p>Writes an OpenSCAD string to a temporary file.</p> <p>The <code>scad_prepend</code> string is prepended to the OpenSCAD code before writing, unless the OpenSCAD code contains the string '//!OpenSCAD', or <code>do_prepend</code> is set to <code>False</code>. In these cases, only the OpenSCAD code is written to the file.</p> <p>Parameters:</p> Name Type Description Default <code>openscad_str</code> <code>str</code> <p>The OpenSCAD code.</p> required <code>do_prepend</code> <code>bool</code> <p>If <code>True</code>, the <code>scad_prepend</code> string is                           prepended to the OpenSCAD code. Defaults to <code>True</code>.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The path to the temporary file where the OpenSCAD code (and  possibly the <code>scad_prepend</code> string) was written.</p> Source code in <code>nicescad/openscad.py</code> <pre><code>def write_to_tmp_file(self, openscad_str: str, do_prepend: bool = True):\n    \"\"\"\n    Writes an OpenSCAD string to a temporary file.\n\n    The `scad_prepend` string is prepended to the OpenSCAD code before writing,\n    unless the OpenSCAD code contains the string '//!OpenSCAD', or `do_prepend`\n    is set to `False`. In these cases, only the OpenSCAD code is written to the file.\n\n    Args:\n        openscad_str (str): The OpenSCAD code.\n        do_prepend (bool, optional): If `True`, the `scad_prepend` string is\n                                      prepended to the OpenSCAD code. Defaults to `True`.\n\n    Returns:\n        str: The path to the temporary file where the OpenSCAD code (and\n             possibly the `scad_prepend` string) was written.\n    \"\"\"\n    scad_tmp_file = os.path.join(self.tmp_dir, \"tmp.scad\")\n    with open(scad_tmp_file, \"w\") as of:\n        if do_prepend and \"//!OpenSCAD\" not in openscad_str:\n            of.write(self.scad_prepend)\n        of.write(openscad_str)\n    return scad_tmp_file\n</code></pre>"},{"location":"#nicescad.process","title":"<code>process</code>","text":""},{"location":"#nicescad.process.Subprocess","title":"<code>Subprocess</code>  <code>dataclass</code>","text":"<p>A class representing a subprocess execution result.</p> Source code in <code>nicescad/process.py</code> <pre><code>@dataclass\nclass Subprocess:\n    \"\"\"A class representing a subprocess execution result.\"\"\"\n\n    stdout: str\n    stderr: str\n    cmd: List[str]\n    returncode: int\n    exception: Optional[BaseException] = None\n\n    @staticmethod\n    async def run_async(cmd: List[str]) -&gt; Awaitable[\"Subprocess\"]:\n        \"\"\"\n        Asynchronously runs a command as a subprocess and returns the result as an instance of this class.\n\n        Args:\n            cmd (List[str]): The command to run.\n\n        Returns:\n            Subprocess: An instance of this class representing the result of the subprocess execution.\n        \"\"\"\n        try:\n            proc = await asyncio.create_subprocess_exec(\n                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE\n            )\n\n            stdout, stderr = await proc.communicate()\n\n            subprocess = Subprocess(\n                stdout=stdout.decode(),\n                stderr=stderr.decode(),\n                cmd=cmd,\n                returncode=proc.returncode,\n            )\n        except BaseException as ex:\n            subprocess = Subprocess(\n                stdout=\"\", stderr=str(ex), cmd=cmd, returncode=-1, exception=ex\n            )\n        return subprocess\n\n    @staticmethod\n    def run(cmd: List[str]) -&gt; \"Subprocess\":\n        \"\"\"\n        Runs a command as a subprocess and returns the result as an instance of this class.\n\n        Args:\n            cmd (List[str]): The command to run.\n\n        Returns:\n            Subprocess: An instance of this class representing the result of the subprocess execution.\n        \"\"\"\n        subprocess = asyncio.run(Subprocess.run_async(cmd))\n        return subprocess\n</code></pre>"},{"location":"#nicescad.process.Subprocess.run","title":"<code>run(cmd)</code>  <code>staticmethod</code>","text":"<p>Runs a command as a subprocess and returns the result as an instance of this class.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>List[str]</code> <p>The command to run.</p> required <p>Returns:</p> Name Type Description <code>Subprocess</code> <code>Subprocess</code> <p>An instance of this class representing the result of the subprocess execution.</p> Source code in <code>nicescad/process.py</code> <pre><code>@staticmethod\ndef run(cmd: List[str]) -&gt; \"Subprocess\":\n    \"\"\"\n    Runs a command as a subprocess and returns the result as an instance of this class.\n\n    Args:\n        cmd (List[str]): The command to run.\n\n    Returns:\n        Subprocess: An instance of this class representing the result of the subprocess execution.\n    \"\"\"\n    subprocess = asyncio.run(Subprocess.run_async(cmd))\n    return subprocess\n</code></pre>"},{"location":"#nicescad.process.Subprocess.run_async","title":"<code>run_async(cmd)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Asynchronously runs a command as a subprocess and returns the result as an instance of this class.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>List[str]</code> <p>The command to run.</p> required <p>Returns:</p> Name Type Description <code>Subprocess</code> <code>Awaitable[Subprocess]</code> <p>An instance of this class representing the result of the subprocess execution.</p> Source code in <code>nicescad/process.py</code> <pre><code>@staticmethod\nasync def run_async(cmd: List[str]) -&gt; Awaitable[\"Subprocess\"]:\n    \"\"\"\n    Asynchronously runs a command as a subprocess and returns the result as an instance of this class.\n\n    Args:\n        cmd (List[str]): The command to run.\n\n    Returns:\n        Subprocess: An instance of this class representing the result of the subprocess execution.\n    \"\"\"\n    try:\n        proc = await asyncio.create_subprocess_exec(\n            *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE\n        )\n\n        stdout, stderr = await proc.communicate()\n\n        subprocess = Subprocess(\n            stdout=stdout.decode(),\n            stderr=stderr.decode(),\n            cmd=cmd,\n            returncode=proc.returncode,\n        )\n    except BaseException as ex:\n        subprocess = Subprocess(\n            stdout=\"\", stderr=str(ex), cmd=cmd, returncode=-1, exception=ex\n        )\n    return subprocess\n</code></pre>"},{"location":"#nicescad.solidservice","title":"<code>solidservice</code>","text":"<p>Created on 2023-07-30</p> <p>@author: wf</p>"},{"location":"#nicescad.solidservice.FastAPIServer","title":"<code>FastAPIServer</code>","text":"<p>Class for FastAPI server.</p> Source code in <code>nicescad/solidservice.py</code> <pre><code>class FastAPIServer:\n    \"\"\"\n    Class for FastAPI server.\n    \"\"\"\n\n    def __init__(self):\n        self.app = FastAPI()\n        self.app.post(\"/convert/\")(self.convert)\n        self.app.get(\"/version/\")(self.version)\n        self.app.get(\"/\", response_class=HTMLResponse)(self.home)\n\n    async def home(self):\n        \"\"\"\n        Endpoint to return the homepage with links.\n\n        Returns:\n        str -- HTML content\n        \"\"\"\n        return \"\"\"\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;title&gt;Nicescad solidpython converter service&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;h1&gt;Welcome to the nicescad solidpython to scad converter&lt;/h1&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"/version/\"&gt;Check the version of nicescad&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"https://github.com/WolfgangFahl/nicescad/issues/28\"&gt;nicescad GitHub issue&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n        \"\"\"\n\n    async def version(self):\n        \"\"\"\n        Endpoint to return the version of the nicescad package.\n\n        Returns:\n        dict -- the version\n        \"\"\"\n        return {\"version\": nicescad.__version__}\n\n    async def convert(self, item: Item):\n        \"\"\"\n        Endpoint to convert Python code to OpenSCAD code.\n\n        Arguments:\n        item: Item -- input Python code\n\n        Returns:\n        dict -- the OpenSCAD code\n        \"\"\"\n        converter = SolidConverter(item.python_code)\n        openscad_code = converter.convert_to_openscad()\n        return {\"openscad_code\": openscad_code}\n</code></pre>"},{"location":"#nicescad.solidservice.FastAPIServer.convert","title":"<code>convert(item)</code>  <code>async</code>","text":"<p>Endpoint to convert Python code to OpenSCAD code.</p> <p>Arguments: item: Item -- input Python code</p> <p>Returns: dict -- the OpenSCAD code</p> Source code in <code>nicescad/solidservice.py</code> <pre><code>async def convert(self, item: Item):\n    \"\"\"\n    Endpoint to convert Python code to OpenSCAD code.\n\n    Arguments:\n    item: Item -- input Python code\n\n    Returns:\n    dict -- the OpenSCAD code\n    \"\"\"\n    converter = SolidConverter(item.python_code)\n    openscad_code = converter.convert_to_openscad()\n    return {\"openscad_code\": openscad_code}\n</code></pre>"},{"location":"#nicescad.solidservice.FastAPIServer.home","title":"<code>home()</code>  <code>async</code>","text":"<p>Endpoint to return the homepage with links.</p> <p>Returns: str -- HTML content</p> Source code in <code>nicescad/solidservice.py</code> <pre><code>async def home(self):\n    \"\"\"\n    Endpoint to return the homepage with links.\n\n    Returns:\n    str -- HTML content\n    \"\"\"\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Nicescad solidpython converter service&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Welcome to the nicescad solidpython to scad converter&lt;/h1&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"/version/\"&gt;Check the version of nicescad&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"https://github.com/WolfgangFahl/nicescad/issues/28\"&gt;nicescad GitHub issue&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n</code></pre>"},{"location":"#nicescad.solidservice.FastAPIServer.version","title":"<code>version()</code>  <code>async</code>","text":"<p>Endpoint to return the version of the nicescad package.</p> <p>Returns: dict -- the version</p> Source code in <code>nicescad/solidservice.py</code> <pre><code>async def version(self):\n    \"\"\"\n    Endpoint to return the version of the nicescad package.\n\n    Returns:\n    dict -- the version\n    \"\"\"\n    return {\"version\": nicescad.__version__}\n</code></pre>"},{"location":"#nicescad.solidservice.SolidConverter","title":"<code>SolidConverter</code>","text":"<p>Class for conversion of Python code to OpenSCAD code.</p> Source code in <code>nicescad/solidservice.py</code> <pre><code>class SolidConverter:\n    \"\"\"\n    Class for conversion of Python code to OpenSCAD code.\n    \"\"\"\n\n    def __init__(self, python_code):\n        self.python_code = python_code\n\n    def convert_to_openscad(self):\n        \"\"\"\n        Function to convert the input Python code into OpenSCAD code using SolidPython\n\n        Returns:\n        str -- OpenSCAD code\n        \"\"\"\n        d = eval(self.python_code)\n        openscad_code = scad_render(d)\n        return openscad_code\n</code></pre>"},{"location":"#nicescad.solidservice.SolidConverter.convert_to_openscad","title":"<code>convert_to_openscad()</code>","text":"<p>Function to convert the input Python code into OpenSCAD code using SolidPython</p> <p>Returns: str -- OpenSCAD code</p> Source code in <code>nicescad/solidservice.py</code> <pre><code>def convert_to_openscad(self):\n    \"\"\"\n    Function to convert the input Python code into OpenSCAD code using SolidPython\n\n    Returns:\n    str -- OpenSCAD code\n    \"\"\"\n    d = eval(self.python_code)\n    openscad_code = scad_render(d)\n    return openscad_code\n</code></pre>"},{"location":"#nicescad.version","title":"<code>version</code>","text":"<p>Created on 2023-06-19</p> <p>@author: wf</p>"},{"location":"#nicescad.version.Version","title":"<code>Version</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Version handling for nicescad</p> Source code in <code>nicescad/version.py</code> <pre><code>@dataclass\nclass Version(object):\n    \"\"\"\n    Version handling for nicescad\n    \"\"\"\n\n    name = \"nicescad\"\n    version = nicescad.__version__\n    date = \"2023-07-19\"\n    updated = \"2024-09-09\"\n    description = \"nicescad brings OpenScad to the browser (again)\"\n\n    authors = \"Wolfgang Fahl\"\n\n    doc_url = \"https://wiki.bitplan.com/index.php/nicescad\"\n    chat_url = \"https://github.com/WolfgangFahl/nicescad/discussions\"\n    cm_url = \"https://github.com/WolfgangFahl/nicescad\"\n\n    license = f\"\"\"Copyright 2023-2024 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#nicescad.webserver","title":"<code>webserver</code>","text":"<p>Created on 2023-06-19</p> <p>@author: wf</p>"},{"location":"#nicescad.webserver.NiceScadSolution","title":"<code>NiceScadSolution</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> <p>the NiceScad solution</p> Source code in <code>nicescad/webserver.py</code> <pre><code>class NiceScadSolution(InputWebSolution):\n    \"\"\"\n    the NiceScad solution\n    \"\"\"\n\n    def __init__(self, webserver: NiceScadWebServer, client: Client):\n        \"\"\"\n        Initialize the solution\n\n        Calls the constructor of the base solution\n        Args:\n            webserver (NiceScadWebServer): The webserver instance associated with this context.\n            client (Client): The client instance this context is associated with.\n        \"\"\"\n        super().__init__(webserver, client)  # Call to the superclass constructor\n        self.input = \"example.scad\"\n        self.stl_name = \"result.stl\"\n        self.stl_color = \"#57B6A9\"\n        self.stl_object = None\n        self.do_trace = True\n        self.html_view = None\n        self.axes_view = None\n        self.oscad = webserver.oscad\n        self.code = \"\"\"// nicescad example\nmodule example() {\n  translate([0,0,15]) {\n     cube(30,center=true);\n     sphere(20);\n  }\n}\nexample();\"\"\"\n\n    async def render(self, _click_args=None):\n        \"\"\"Renders the OpenScad string and updates the 3D scene with the result.\n\n        Args:\n            click_args (object): The click event arguments.\n        \"\"\"\n        try:\n            self.progress_view.visible = True\n            ui.notify(\"rendering ...\")\n            with self.scene:\n                self.stl_link.visible = False\n                self.color_picker_button.disable()\n            openscad_str = self.code_area.value\n            stl_path = stl_path = os.path.join(self.oscad.tmp_dir, self.stl_name)\n            render_result = await self.oscad.openscad_str_to_file(\n                openscad_str, stl_path\n            )\n            # show render result in log\n            self.log_view.push(render_result.stderr)\n            if render_result.returncode == 0:\n                ui.notify(\"stl created ... loading into scene\")\n                self.stl_link.visible = True\n                self.color_picker_button.enable()\n                with self.scene:\n                    self.stl_object = (\n                        self.scene.stl(f\"/stl/{self.stl_name}\").move(x=0.0).scale(0.1)\n                    )\n                    self.stl_object.name = self.stl_name\n                    self.stl_object.material(self.stl_color)\n        except BaseException as ex:\n            self.handle_exception(ex, self.do_trace)\n        self.progress_view.visible = False\n\n    def read_input(self, input_str: str):\n        \"\"\"Reads the given input and handles any exceptions.\n\n        Args:\n            input_str (str): The input string representing a URL or local file.\n        \"\"\"\n        try:\n            ui.notify(f\"reading {input_str}\")\n            self.code = self.do_read_input(input_str)\n            self.input_input.set_value(input_str)\n            self.code_area.set_value(self.code)\n            self.log_view.clear()\n            self.error_msg = None\n            self.stl_link.visible = False\n        except BaseException as e:\n            self.code = None\n            self.handle_exception(e)\n\n    def save_file(self):\n        \"\"\"Saves the current code to the last input file, if it was a local path.\"\"\"\n        if self.is_local and self.input:\n            with open(self.input, \"w\") as file:\n                file.write(self.code)\n            ui.notify(f\"{self.input} saved\")\n        else:\n            raise Exception(\"No local file to save to\")\n\n    async def open_file(self) -&gt; None:\n        \"\"\"Opens a Local filer picker dialog and reads the selected input file.\"\"\"\n        if self.is_local:\n            pick_list = await LocalFilePicker(\"~\", multiple=False)\n            if len(pick_list) &gt; 0:\n                input_file = pick_list[0]\n                await self.read_and_optionally_render(input_file)\n\n    pass\n\n    def setup_pygments(self):\n        \"\"\"\n        prepare pygments syntax highlighting by loading style\n        \"\"\"\n        pygments_css_file = (\n            Path(__file__).parent / \"web\" / \"static\" / \"css\" / \"pygments.css\"\n        )\n        pygments_css = pygments_css_file.read_text()\n        ui.add_head_html(f\"&lt;style&gt;{pygments_css}&lt;/style&gt;\")\n\n    def code_changed(self, cargs):\n        \"\"\"\n        react on changed code\n        \"\"\"\n        self.code = cargs.value\n        pass\n\n    async def highlight_code(self, _cargs):\n        \"\"\"\n        highlight the code and show the html\n        \"\"\"\n        try:\n            if self.code_area.visible:\n                self.code_area.visible = False\n                code_html = self.oscad.highlight_code(self.code)\n                self.html_view.content = code_html\n                self.html_view.visible = True\n            else:\n                self.html_view.visible = False\n                self.code_area.visible = True\n            self.toggle_icon(self.highlight_button)\n        except BaseException as ex:\n            self.handle_exception(ex, self.do_trace)\n\n    async def pick_color(self, e: ColorPickEventArguments):\n        \"\"\"\n        Asynchronously picks a color based on provided event arguments.\n\n        This function changes the color of the 'color_picker_button' and the 'stl_object'\n        according to the color specified in the event arguments.\n\n        Args:\n            e (ColorPickEventArguments): An object containing event-specific arguments.\n                The 'color' attribute of this object specifies the color to be applied.\n\n        Note:\n            If 'stl_object' is None, the function will only change the color of 'color_picker_button'.\n            Otherwise, it changes the color of both 'color_picker_button' and 'stl_object'.\n        \"\"\"\n        self.color_picker_button.style(f\"background-color:{e.color}!important\")\n        if self.stl_object:\n            self.stl_color = e.color\n            self.stl_object.material(f\"{e.color}\")\n        pass\n\n    async def toggle_axes(self):\n        \"\"\"\n        toggle the axes of my scene\n        \"\"\"\n        self.toggle_icon(self.axes_button)\n        if self.axes_view is None:\n            self.axes_view = AxesHelper(self.scene)\n        else:\n            self.axes_view.toggle_axes()\n        pass\n\n    async def toggle_grid(self, _ea):\n        \"\"\"\n        toogle the grid of my scene\n        \"\"\"\n        try:\n            grid = self.scene._props[\"grid\"]\n            grid_str = \"off\" if grid else \"on\"\n            grid_js = \"false\" if grid else \"true\"\n            # try toggling grid\n            ui.notify(f\"setting grid to {grid_str}\")\n            grid = not grid\n            # workaround according to https://github.com/zauberzeug/nicegui/discussions/1246\n            js_cmd = f'scene_c{self.scene.id}.children.find(c =&gt; c.type === \"GridHelper\").visible = {grid_js}'\n            await ui.run_javascript(js_cmd, respond=False)\n            self.scene._props[\"grid\"] = grid\n            self.scene.update()\n            # try toggling icon\n            self.toggle_icon(self.grid_button)\n        except BaseException as ex:\n            self.handleExeption(ex)\n        pass\n\n    def prepare_ui(self):\n        \"\"\"\n        handle the command line arguments\n        \"\"\"\n        InputWebSolution.prepare_ui(self)\n        self.setup_pygments()\n\n    async def home(self):\n        \"\"\"Generates the home page with a 3D viewer and a code editor.\"\"\"\n\n        self.setup_menu()\n        with ui.column():\n            with ui.splitter() as splitter:\n                with splitter.before:\n                    self.grid_button = self.tool_button(\n                        \"toggle grid\",\n                        handler=self.toggle_grid,\n                        icon=\"grid_off\",\n                        toggle_icon=\"grid_on\",\n                    )\n                    self.axes_button = self.tool_button(\n                        \"toggle axes\",\n                        icon=\"polyline\",\n                        toggle_icon=\"square\",\n                        handler=self.toggle_axes,\n                    )\n                    self.color_picker_button = ui.button(\n                        icon=\"colorize\", color=self.stl_color\n                    )\n                    with self.color_picker_button:\n                        self.color_picker = ui.color_picker(on_pick=self.pick_color)\n                    self.color_picker_button.disable()\n\n                    with ui.scene(width=1024, height=768).classes(\"w-full\") as scene:\n                        self.scene = scene\n                        scene.spot_light(distance=100, intensity=0.2).move(-10, 0, 10)\n                    with splitter.after:\n                        with ui.element(\"div\").classes(\"w-full\"):\n                            extensions = {\"scad\": \".scad\", \"xml\": \".xml\"}\n                            self.example_selector = FileSelector(\n                                path=self.root_path,\n                                handler=self.read_and_optionally_render,\n                                extensions=extensions,\n                            )\n                            self.input_input = ui.input(\n                                value=self.input, on_change=self.input_changed\n                            ).props(\"size=100\")\n                            self.highlight_button = self.tool_button(\n                                tooltip=\"highlight\",\n                                icon=\"html\",\n                                toggle_icon=\"code\",\n                                handler=self.highlight_code,\n                            )\n                            if self.is_local:\n                                self.tool_button(\n                                    tooltip=\"save\", icon=\"save\", handler=self.save_file\n                                )\n                            self.tool_button(\n                                tooltip=\"reload\",\n                                icon=\"refresh\",\n                                handler=self.reload_file,\n                            )\n                            if self.is_local:\n                                self.tool_button(\n                                    tooltip=\"open\",\n                                    icon=\"file_open\",\n                                    handler=self.open_file,\n                                )\n                            self.tool_button(\n                                tooltip=\"render\",\n                                icon=\"play_circle\",\n                                handler=self.render,\n                            )\n                            self.stl_link = ui.link(\n                                \"stl result\", f\"/stl/{self.stl_name}\", new_tab=True\n                            )\n                            self.stl_link.visible = False\n                            self.progress_view = ui.spinner(\n                                \"dots\", size=\"lg\", color=\"blue\"\n                            )\n                            self.progress_view.visible = False\n                            self.code_area = (\n                                ui.textarea(\n                                    value=self.code, on_change=self.code_changed\n                                )\n                                .props(\"clearable\")\n                                .props(\"rows=25\")\n                            )\n                            self.html_view = ui.html()\n                            self.html_view.visible = False\n                            self.log_view = ui.log(max_lines=20).classes(\"w-full h-40\")\n        await self.setup_footer()\n        if self.args.input:\n            await self.read_and_optionally_render(self.args.input)\n\n    def configure_settings(self):\n        \"\"\"Generates the settings page with a link to the project's GitHub page.\"\"\"\n        sp_input = ui.textarea(\"scad prepend\", value=self.oscad.scad_prepend).props(\n            \"cols=80\"\n        )\n        sp_input.bind_value(self.oscad, \"scad_prepend\")\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initialize the solution</p> <p>Calls the constructor of the base solution Args:     webserver (NiceScadWebServer): The webserver instance associated with this context.     client (Client): The client instance this context is associated with.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>    def __init__(self, webserver: NiceScadWebServer, client: Client):\n        \"\"\"\n        Initialize the solution\n\n        Calls the constructor of the base solution\n        Args:\n            webserver (NiceScadWebServer): The webserver instance associated with this context.\n            client (Client): The client instance this context is associated with.\n        \"\"\"\n        super().__init__(webserver, client)  # Call to the superclass constructor\n        self.input = \"example.scad\"\n        self.stl_name = \"result.stl\"\n        self.stl_color = \"#57B6A9\"\n        self.stl_object = None\n        self.do_trace = True\n        self.html_view = None\n        self.axes_view = None\n        self.oscad = webserver.oscad\n        self.code = \"\"\"// nicescad example\nmodule example() {\n  translate([0,0,15]) {\n     cube(30,center=true);\n     sphere(20);\n  }\n}\nexample();\"\"\"\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.code_changed","title":"<code>code_changed(cargs)</code>","text":"<p>react on changed code</p> Source code in <code>nicescad/webserver.py</code> <pre><code>def code_changed(self, cargs):\n    \"\"\"\n    react on changed code\n    \"\"\"\n    self.code = cargs.value\n    pass\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.configure_settings","title":"<code>configure_settings()</code>","text":"<p>Generates the settings page with a link to the project's GitHub page.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>def configure_settings(self):\n    \"\"\"Generates the settings page with a link to the project's GitHub page.\"\"\"\n    sp_input = ui.textarea(\"scad prepend\", value=self.oscad.scad_prepend).props(\n        \"cols=80\"\n    )\n    sp_input.bind_value(self.oscad, \"scad_prepend\")\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.highlight_code","title":"<code>highlight_code(_cargs)</code>  <code>async</code>","text":"<p>highlight the code and show the html</p> Source code in <code>nicescad/webserver.py</code> <pre><code>async def highlight_code(self, _cargs):\n    \"\"\"\n    highlight the code and show the html\n    \"\"\"\n    try:\n        if self.code_area.visible:\n            self.code_area.visible = False\n            code_html = self.oscad.highlight_code(self.code)\n            self.html_view.content = code_html\n            self.html_view.visible = True\n        else:\n            self.html_view.visible = False\n            self.code_area.visible = True\n        self.toggle_icon(self.highlight_button)\n    except BaseException as ex:\n        self.handle_exception(ex, self.do_trace)\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.home","title":"<code>home()</code>  <code>async</code>","text":"<p>Generates the home page with a 3D viewer and a code editor.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>async def home(self):\n    \"\"\"Generates the home page with a 3D viewer and a code editor.\"\"\"\n\n    self.setup_menu()\n    with ui.column():\n        with ui.splitter() as splitter:\n            with splitter.before:\n                self.grid_button = self.tool_button(\n                    \"toggle grid\",\n                    handler=self.toggle_grid,\n                    icon=\"grid_off\",\n                    toggle_icon=\"grid_on\",\n                )\n                self.axes_button = self.tool_button(\n                    \"toggle axes\",\n                    icon=\"polyline\",\n                    toggle_icon=\"square\",\n                    handler=self.toggle_axes,\n                )\n                self.color_picker_button = ui.button(\n                    icon=\"colorize\", color=self.stl_color\n                )\n                with self.color_picker_button:\n                    self.color_picker = ui.color_picker(on_pick=self.pick_color)\n                self.color_picker_button.disable()\n\n                with ui.scene(width=1024, height=768).classes(\"w-full\") as scene:\n                    self.scene = scene\n                    scene.spot_light(distance=100, intensity=0.2).move(-10, 0, 10)\n                with splitter.after:\n                    with ui.element(\"div\").classes(\"w-full\"):\n                        extensions = {\"scad\": \".scad\", \"xml\": \".xml\"}\n                        self.example_selector = FileSelector(\n                            path=self.root_path,\n                            handler=self.read_and_optionally_render,\n                            extensions=extensions,\n                        )\n                        self.input_input = ui.input(\n                            value=self.input, on_change=self.input_changed\n                        ).props(\"size=100\")\n                        self.highlight_button = self.tool_button(\n                            tooltip=\"highlight\",\n                            icon=\"html\",\n                            toggle_icon=\"code\",\n                            handler=self.highlight_code,\n                        )\n                        if self.is_local:\n                            self.tool_button(\n                                tooltip=\"save\", icon=\"save\", handler=self.save_file\n                            )\n                        self.tool_button(\n                            tooltip=\"reload\",\n                            icon=\"refresh\",\n                            handler=self.reload_file,\n                        )\n                        if self.is_local:\n                            self.tool_button(\n                                tooltip=\"open\",\n                                icon=\"file_open\",\n                                handler=self.open_file,\n                            )\n                        self.tool_button(\n                            tooltip=\"render\",\n                            icon=\"play_circle\",\n                            handler=self.render,\n                        )\n                        self.stl_link = ui.link(\n                            \"stl result\", f\"/stl/{self.stl_name}\", new_tab=True\n                        )\n                        self.stl_link.visible = False\n                        self.progress_view = ui.spinner(\n                            \"dots\", size=\"lg\", color=\"blue\"\n                        )\n                        self.progress_view.visible = False\n                        self.code_area = (\n                            ui.textarea(\n                                value=self.code, on_change=self.code_changed\n                            )\n                            .props(\"clearable\")\n                            .props(\"rows=25\")\n                        )\n                        self.html_view = ui.html()\n                        self.html_view.visible = False\n                        self.log_view = ui.log(max_lines=20).classes(\"w-full h-40\")\n    await self.setup_footer()\n    if self.args.input:\n        await self.read_and_optionally_render(self.args.input)\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.open_file","title":"<code>open_file()</code>  <code>async</code>","text":"<p>Opens a Local filer picker dialog and reads the selected input file.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>async def open_file(self) -&gt; None:\n    \"\"\"Opens a Local filer picker dialog and reads the selected input file.\"\"\"\n    if self.is_local:\n        pick_list = await LocalFilePicker(\"~\", multiple=False)\n        if len(pick_list) &gt; 0:\n            input_file = pick_list[0]\n            await self.read_and_optionally_render(input_file)\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.pick_color","title":"<code>pick_color(e)</code>  <code>async</code>","text":"<p>Asynchronously picks a color based on provided event arguments.</p> <p>This function changes the color of the 'color_picker_button' and the 'stl_object' according to the color specified in the event arguments.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>ColorPickEventArguments</code> <p>An object containing event-specific arguments. The 'color' attribute of this object specifies the color to be applied.</p> required Note <p>If 'stl_object' is None, the function will only change the color of 'color_picker_button'. Otherwise, it changes the color of both 'color_picker_button' and 'stl_object'.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>async def pick_color(self, e: ColorPickEventArguments):\n    \"\"\"\n    Asynchronously picks a color based on provided event arguments.\n\n    This function changes the color of the 'color_picker_button' and the 'stl_object'\n    according to the color specified in the event arguments.\n\n    Args:\n        e (ColorPickEventArguments): An object containing event-specific arguments.\n            The 'color' attribute of this object specifies the color to be applied.\n\n    Note:\n        If 'stl_object' is None, the function will only change the color of 'color_picker_button'.\n        Otherwise, it changes the color of both 'color_picker_button' and 'stl_object'.\n    \"\"\"\n    self.color_picker_button.style(f\"background-color:{e.color}!important\")\n    if self.stl_object:\n        self.stl_color = e.color\n        self.stl_object.material(f\"{e.color}\")\n    pass\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.prepare_ui","title":"<code>prepare_ui()</code>","text":"<p>handle the command line arguments</p> Source code in <code>nicescad/webserver.py</code> <pre><code>def prepare_ui(self):\n    \"\"\"\n    handle the command line arguments\n    \"\"\"\n    InputWebSolution.prepare_ui(self)\n    self.setup_pygments()\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.read_input","title":"<code>read_input(input_str)</code>","text":"<p>Reads the given input and handles any exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>The input string representing a URL or local file.</p> required Source code in <code>nicescad/webserver.py</code> <pre><code>def read_input(self, input_str: str):\n    \"\"\"Reads the given input and handles any exceptions.\n\n    Args:\n        input_str (str): The input string representing a URL or local file.\n    \"\"\"\n    try:\n        ui.notify(f\"reading {input_str}\")\n        self.code = self.do_read_input(input_str)\n        self.input_input.set_value(input_str)\n        self.code_area.set_value(self.code)\n        self.log_view.clear()\n        self.error_msg = None\n        self.stl_link.visible = False\n    except BaseException as e:\n        self.code = None\n        self.handle_exception(e)\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.render","title":"<code>render(_click_args=None)</code>  <code>async</code>","text":"<p>Renders the OpenScad string and updates the 3D scene with the result.</p> <p>Parameters:</p> Name Type Description Default <code>click_args</code> <code>object</code> <p>The click event arguments.</p> required Source code in <code>nicescad/webserver.py</code> <pre><code>async def render(self, _click_args=None):\n    \"\"\"Renders the OpenScad string and updates the 3D scene with the result.\n\n    Args:\n        click_args (object): The click event arguments.\n    \"\"\"\n    try:\n        self.progress_view.visible = True\n        ui.notify(\"rendering ...\")\n        with self.scene:\n            self.stl_link.visible = False\n            self.color_picker_button.disable()\n        openscad_str = self.code_area.value\n        stl_path = stl_path = os.path.join(self.oscad.tmp_dir, self.stl_name)\n        render_result = await self.oscad.openscad_str_to_file(\n            openscad_str, stl_path\n        )\n        # show render result in log\n        self.log_view.push(render_result.stderr)\n        if render_result.returncode == 0:\n            ui.notify(\"stl created ... loading into scene\")\n            self.stl_link.visible = True\n            self.color_picker_button.enable()\n            with self.scene:\n                self.stl_object = (\n                    self.scene.stl(f\"/stl/{self.stl_name}\").move(x=0.0).scale(0.1)\n                )\n                self.stl_object.name = self.stl_name\n                self.stl_object.material(self.stl_color)\n    except BaseException as ex:\n        self.handle_exception(ex, self.do_trace)\n    self.progress_view.visible = False\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.save_file","title":"<code>save_file()</code>","text":"<p>Saves the current code to the last input file, if it was a local path.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>def save_file(self):\n    \"\"\"Saves the current code to the last input file, if it was a local path.\"\"\"\n    if self.is_local and self.input:\n        with open(self.input, \"w\") as file:\n            file.write(self.code)\n        ui.notify(f\"{self.input} saved\")\n    else:\n        raise Exception(\"No local file to save to\")\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.setup_pygments","title":"<code>setup_pygments()</code>","text":"<p>prepare pygments syntax highlighting by loading style</p> Source code in <code>nicescad/webserver.py</code> <pre><code>def setup_pygments(self):\n    \"\"\"\n    prepare pygments syntax highlighting by loading style\n    \"\"\"\n    pygments_css_file = (\n        Path(__file__).parent / \"web\" / \"static\" / \"css\" / \"pygments.css\"\n    )\n    pygments_css = pygments_css_file.read_text()\n    ui.add_head_html(f\"&lt;style&gt;{pygments_css}&lt;/style&gt;\")\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.toggle_axes","title":"<code>toggle_axes()</code>  <code>async</code>","text":"<p>toggle the axes of my scene</p> Source code in <code>nicescad/webserver.py</code> <pre><code>async def toggle_axes(self):\n    \"\"\"\n    toggle the axes of my scene\n    \"\"\"\n    self.toggle_icon(self.axes_button)\n    if self.axes_view is None:\n        self.axes_view = AxesHelper(self.scene)\n    else:\n        self.axes_view.toggle_axes()\n    pass\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadSolution.toggle_grid","title":"<code>toggle_grid(_ea)</code>  <code>async</code>","text":"<p>toogle the grid of my scene</p> Source code in <code>nicescad/webserver.py</code> <pre><code>async def toggle_grid(self, _ea):\n    \"\"\"\n    toogle the grid of my scene\n    \"\"\"\n    try:\n        grid = self.scene._props[\"grid\"]\n        grid_str = \"off\" if grid else \"on\"\n        grid_js = \"false\" if grid else \"true\"\n        # try toggling grid\n        ui.notify(f\"setting grid to {grid_str}\")\n        grid = not grid\n        # workaround according to https://github.com/zauberzeug/nicegui/discussions/1246\n        js_cmd = f'scene_c{self.scene.id}.children.find(c =&gt; c.type === \"GridHelper\").visible = {grid_js}'\n        await ui.run_javascript(js_cmd, respond=False)\n        self.scene._props[\"grid\"] = grid\n        self.scene.update()\n        # try toggling icon\n        self.toggle_icon(self.grid_button)\n    except BaseException as ex:\n        self.handleExeption(ex)\n    pass\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadWebServer","title":"<code>NiceScadWebServer</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>WebServer class that manages the server and handles OpenScad operations.</p> <p>Attributes:</p> Name Type Description <code>oscad</code> <code>OpenScad</code> <p>An OpenScad object that aids in performing OpenScad operations.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>class NiceScadWebServer(InputWebserver):\n    \"\"\"WebServer class that manages the server and handles OpenScad operations.\n\n    Attributes:\n        oscad (OpenScad): An OpenScad object that aids in performing OpenScad operations.\n    \"\"\"\n\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        copy_right = \"(c)2023-2024 Wolfgang Fahl\"\n        config = WebserverConfig(\n            copy_right=copy_right,\n            version=Version(),\n            default_port=9858,\n            short_name=\"nicescad\",\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = NiceScadSolution\n        return server_config\n\n    def __init__(self):\n        \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n        InputWebserver.__init__(self, config=NiceScadWebServer.get_config())\n        self.oscad = OpenScad(\n            scad_prepend=\"\"\"//https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Other_Language_Features#$fa,_$fs_and_$fn\n// default number of facets for arc generation\n$fn=30;\n\"\"\"\n        )\n        app.add_static_files(\"/stl\", self.oscad.tmp_dir)\n\n    def configure_run(self):\n        root_path = (\n            self.args.root_path\n            if self.args.root_path\n            else NiceScadWebServer.examples_path()\n        )\n        self.root_path = os.path.abspath(root_path)\n        self.allowed_urls = [\n            \"https://raw.githubusercontent.com/WolfgangFahl/nicescad/main/examples/\",\n            \"https://raw.githubusercontent.com/openscad/openscad/master/examples/\",\n            self.examples_path(),\n            self.root_path,\n        ]\n\n    @classmethod\n    def examples_path(cls) -&gt; str:\n        # the root directory (default: examples)\n        path = os.path.join(os.path.dirname(__file__), \"../nicescad_examples\")\n        path = os.path.abspath(path)\n        return path\n</code></pre>"},{"location":"#nicescad.webserver.NiceScadWebServer.__init__","title":"<code>__init__()</code>","text":"<p>Constructs all the necessary attributes for the WebServer object.</p> Source code in <code>nicescad/webserver.py</code> <pre><code>    def __init__(self):\n        \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n        InputWebserver.__init__(self, config=NiceScadWebServer.get_config())\n        self.oscad = OpenScad(\n            scad_prepend=\"\"\"//https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Other_Language_Features#$fa,_$fs_and_$fn\n// default number of facets for arc generation\n$fn=30;\n\"\"\"\n        )\n        app.add_static_files(\"/stl\", self.oscad.tmp_dir)\n</code></pre>"}]}